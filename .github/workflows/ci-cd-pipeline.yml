name: Deploy and Test API
#Install dependencies, run tests, if tests ok deploy on EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.12.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.7'

      - name: Install Dependencies for Tests
        run: |
          python -m venv venv_tests
          source venv_tests/bin/activate
          pip install --upgrade pip
          pip install -r tests/requirements_tests.txt

      - name: Run API Tests
        run: |
          source venv_tests/bin/activate
          pytest tests/test_api.py --maxfail=1 --disable-warnings -v

      - name: Set up SSH for EC2 connection
        if: success()  # Continue only if tests pass
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        if: success()  # Continue only if SSH setup succeeds
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
            ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_API_HOST }} << 'EOF'
            # Go to your application directory (streamlit_dashboard_api)
            cd ~/streamlit_dashboard_api
            
            # Configure sparse checkout to import only necessary files
            git config core.sparseCheckout true
            echo "api/" > .git/info/sparse-checkout
            echo "models/" >> .git/info/sparse-checkout
            echo "data/processed/" >> .git/info/sparse-checkout
            echo "requirements_api.txt" >> .git/info/sparse-checkout
            git read-tree -mu HEAD
            
            # Pull updates from the repository
            git pull origin main

            # Go to the API directory
            cd api
            
            # Create and activate a virtual environment
            python3.12 -m venv ~/venv_api
            source ~/venv_api/bin/activate
            
            # Install necessary dependencies
            pip install --upgrade pip
            pip install -r requirements_api.txt
            
            # Restart nginx
            sudo service nginx restart
            
            # Launch the API in the background
            nohup uvicorn api:app --host 0.0.0.0 --port 8000 --reload &
            EOF
