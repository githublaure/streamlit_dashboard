name: Deploy and Test API
# Install dependencies, run tests, if tests pass, deploy on EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Checkout du repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2: Configurer Python 3.12.7
      - name: Set up Python 3.12.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.7'

      # Étape 3: Installer les dépendances des tests
      - name: Install Dependencies for Tests
        run: |
          python -m venv venv_tests
          source venv_tests/bin/activate
          pip install --upgrade pip
          pip install -r tests/requirements_tests.txt

      # Étape 4: Exécuter les tests de l'API
      - name: Run API Tests
        run: |
          source venv_tests/bin/activate
          pytest tests/test_api.py --maxfail=1 --disable-warnings -v

      # Étape 5: Configurer SSH pour se connecter à EC2 (si les tests réussissent)
      - name: Set up SSH for EC2 connection
        if: success()
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Étape 6: Déploiement sur EC2 (si SSH est configuré avec succès)
      - name: Deploy to EC2
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_API_HOST }} << 'EOF'
            # Aller dans le répertoire de l'application
            cd ~/streamlit_dashboard_api
            
            # Configurer le sparse checkout pour importer seulement les fichiers nécessaires
            git config core.sparseCheckout true
            echo "api/" > .git/info/sparse-checkout
            echo "models/" >> .git/info/sparse-checkout
            echo "data/processed/" >> .git/info/sparse-checkout
            echo "requirements_api.txt" >> .git/info/sparse-checkout
            git read-tree -mu HEAD
            
            # Tirer les mises à jour du dépôt
            git pull origin main

            # Aller dans le répertoire de l'API
            cd api
            
            # Activer l'environnement virtuel existant (venv_api)
            source ~/venv_api/bin/activate
            
            # Installer les dépendances nécessaires
            pip install --upgrade pip
            pip install -r requirements_api.txt
            
            # Redémarrer l'API
            sudo systemctl restart fastapi_api.service
            
            # Redémarrer Nginx
            sudo systemctl restart nginx
          EOF
          
      # Étape 7: Attendre que l'API démarre avant de vérifier son état
      - name: Wait for API to start
        run: sleep 10  # Attendre 10 secondes

      # Étape 8: Exécuter les tests de l'API déployée (Post-deployment test)
      - name: Run API Tests (Post Deployment)
        env:
          API_URL: ${{ secrets.API_URL }}  # URL de votre API déployée
        run: |
          pytest tests/test_api.py --maxfail=1 --disable-warnings -v
